#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PCMonitorSampleUnitThriftModel:
  """
  Attributes:
   - dataTime
   - timestamp
   - pageId
   - countryId
   - provinceId
   - cityId
   - ispId
   - localDns
   - clientIp
   - serverIp
   - avgCpuUsageRate
   - currentRamUsageSize
   - maxRamUsageSize
   - firstScreen
   - startRender
   - totalTime
   - basePageDownloadTime
   - clientTime
   - connectTime
   - connectTotalTime
   - contentLoadTime
   - dnsParseTime
   - dnsTime
   - firstPackage
   - netlayerTime
   - redirectTime
   - requestsendTime
   - sslTime
   - basePageSize
   - basePageSpeed
   - downloadSpeed
   - firstScreenBytes
   - pageSize
   - ajaxNumber
   - connectNumberOfTimes
   - dnsParseNumber
   - domNumber
   - firstScreenObjs
   - pageObjs
   - osId
   - browserId
   - errorId
   - closeTime
   - serverIspId
   - iframeNumber
   - additionalDataTime
   - pageOpenTime
   - serverType
   - httpVia
   - noCompressElemNumber
   - noExpiresElemNumber
   - noEtagElemNumber
   - currentCpuUsageRate
   - remarks
   - httpCode
   - memorySize
   - har
   - imageUrl
   - pingInfo
   - tracertInfo
   - nslookupInfo
   - reserved3
   - serverCountryId
   - serverProvinceId
   - serverCityId
   - errorDesc
   - responseHeader
   - errorObjs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataTime', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.I32, 'pageId', None, None, ), # 3
    (4, TType.STRING, 'countryId', None, None, ), # 4
    (5, TType.I32, 'provinceId', None, None, ), # 5
    (6, TType.I32, 'cityId', None, None, ), # 6
    (7, TType.I32, 'ispId', None, None, ), # 7
    (8, TType.STRING, 'localDns', None, None, ), # 8
    (9, TType.STRING, 'clientIp', None, None, ), # 9
    (10, TType.STRING, 'serverIp', None, None, ), # 10
    (11, TType.I32, 'avgCpuUsageRate', None, None, ), # 11
    (12, TType.I32, 'currentRamUsageSize', None, None, ), # 12
    (13, TType.I32, 'maxRamUsageSize', None, None, ), # 13
    (14, TType.I32, 'firstScreen', None, None, ), # 14
    (15, TType.I32, 'startRender', None, None, ), # 15
    (16, TType.I32, 'totalTime', None, None, ), # 16
    (17, TType.I32, 'basePageDownloadTime', None, None, ), # 17
    (18, TType.I32, 'clientTime', None, None, ), # 18
    (19, TType.I32, 'connectTime', None, None, ), # 19
    (20, TType.I32, 'connectTotalTime', None, None, ), # 20
    (21, TType.I32, 'contentLoadTime', None, None, ), # 21
    (22, TType.I32, 'dnsParseTime', None, None, ), # 22
    (23, TType.I32, 'dnsTime', None, None, ), # 23
    (24, TType.I32, 'firstPackage', None, None, ), # 24
    (25, TType.I32, 'netlayerTime', None, None, ), # 25
    (26, TType.I32, 'redirectTime', None, None, ), # 26
    (27, TType.I32, 'requestsendTime', None, None, ), # 27
    (28, TType.I32, 'sslTime', None, None, ), # 28
    (29, TType.I32, 'basePageSize', None, None, ), # 29
    (30, TType.I32, 'basePageSpeed', None, None, ), # 30
    (31, TType.I32, 'downloadSpeed', None, None, ), # 31
    (32, TType.I32, 'firstScreenBytes', None, None, ), # 32
    (33, TType.I32, 'pageSize', None, None, ), # 33
    (34, TType.I32, 'ajaxNumber', None, None, ), # 34
    (35, TType.I32, 'connectNumberOfTimes', None, None, ), # 35
    (36, TType.I32, 'dnsParseNumber', None, None, ), # 36
    (37, TType.I32, 'domNumber', None, None, ), # 37
    (38, TType.I32, 'firstScreenObjs', None, None, ), # 38
    (39, TType.I32, 'pageObjs', None, None, ), # 39
    (40, TType.I32, 'osId', None, None, ), # 40
    (41, TType.I32, 'browserId', None, None, ), # 41
    (42, TType.I32, 'errorId', None, None, ), # 42
    (43, TType.I32, 'closeTime', None, None, ), # 43
    (44, TType.I32, 'serverIspId', None, None, ), # 44
    (45, TType.I32, 'iframeNumber', None, None, ), # 45
    (46, TType.I32, 'additionalDataTime', None, None, ), # 46
    (47, TType.I32, 'pageOpenTime', None, None, ), # 47
    (48, TType.I32, 'serverType', None, None, ), # 48
    (49, TType.I32, 'httpVia', None, None, ), # 49
    (50, TType.I32, 'noCompressElemNumber', None, None, ), # 50
    (51, TType.I32, 'noExpiresElemNumber', None, None, ), # 51
    (52, TType.I32, 'noEtagElemNumber', None, None, ), # 52
    (53, TType.I32, 'currentCpuUsageRate', None, None, ), # 53
    (54, TType.STRING, 'remarks', None, None, ), # 54
    (55, TType.STRING, 'httpCode', None, None, ), # 55
    (56, TType.I32, 'memorySize', None, None, ), # 56
    (57, TType.STRING, 'har', None, None, ), # 57
    (58, TType.STRING, 'imageUrl', None, None, ), # 58
    (59, TType.STRING, 'pingInfo', None, None, ), # 59
    (60, TType.STRING, 'tracertInfo', None, None, ), # 60
    (61, TType.STRING, 'nslookupInfo', None, None, ), # 61
    (62, TType.STRING, 'reserved3', None, None, ), # 62
    (63, TType.STRING, 'serverCountryId', None, None, ), # 63
    (64, TType.I32, 'serverProvinceId', None, None, ), # 64
    (65, TType.I32, 'serverCityId', None, None, ), # 65
    (66, TType.STRING, 'errorDesc', None, None, ), # 66
    (67, TType.STRING, 'responseHeader', None, None, ), # 67
    (68, TType.I32, 'errorObjs', None, None, ), # 68
  )

  def __init__(self, dataTime=None, timestamp=None, pageId=None, countryId=None, provinceId=None, cityId=None, ispId=None, localDns=None, clientIp=None, serverIp=None, avgCpuUsageRate=None, currentRamUsageSize=None, maxRamUsageSize=None, firstScreen=None, startRender=None, totalTime=None, basePageDownloadTime=None, clientTime=None, connectTime=None, connectTotalTime=None, contentLoadTime=None, dnsParseTime=None, dnsTime=None, firstPackage=None, netlayerTime=None, redirectTime=None, requestsendTime=None, sslTime=None, basePageSize=None, basePageSpeed=None, downloadSpeed=None, firstScreenBytes=None, pageSize=None, ajaxNumber=None, connectNumberOfTimes=None, dnsParseNumber=None, domNumber=None, firstScreenObjs=None, pageObjs=None, osId=None, browserId=None, errorId=None, closeTime=None, serverIspId=None, iframeNumber=None, additionalDataTime=None, pageOpenTime=None, serverType=None, httpVia=None, noCompressElemNumber=None, noExpiresElemNumber=None, noEtagElemNumber=None, currentCpuUsageRate=None, remarks=None, httpCode=None, memorySize=None, har=None, imageUrl=None, pingInfo=None, tracertInfo=None, nslookupInfo=None, reserved3=None, serverCountryId=None, serverProvinceId=None, serverCityId=None, errorDesc=None, responseHeader=None, errorObjs=None,):
    self.dataTime = dataTime
    self.timestamp = timestamp
    self.pageId = pageId
    self.countryId = countryId
    self.provinceId = provinceId
    self.cityId = cityId
    self.ispId = ispId
    self.localDns = localDns
    self.clientIp = clientIp
    self.serverIp = serverIp
    self.avgCpuUsageRate = avgCpuUsageRate
    self.currentRamUsageSize = currentRamUsageSize
    self.maxRamUsageSize = maxRamUsageSize
    self.firstScreen = firstScreen
    self.startRender = startRender
    self.totalTime = totalTime
    self.basePageDownloadTime = basePageDownloadTime
    self.clientTime = clientTime
    self.connectTime = connectTime
    self.connectTotalTime = connectTotalTime
    self.contentLoadTime = contentLoadTime
    self.dnsParseTime = dnsParseTime
    self.dnsTime = dnsTime
    self.firstPackage = firstPackage
    self.netlayerTime = netlayerTime
    self.redirectTime = redirectTime
    self.requestsendTime = requestsendTime
    self.sslTime = sslTime
    self.basePageSize = basePageSize
    self.basePageSpeed = basePageSpeed
    self.downloadSpeed = downloadSpeed
    self.firstScreenBytes = firstScreenBytes
    self.pageSize = pageSize
    self.ajaxNumber = ajaxNumber
    self.connectNumberOfTimes = connectNumberOfTimes
    self.dnsParseNumber = dnsParseNumber
    self.domNumber = domNumber
    self.firstScreenObjs = firstScreenObjs
    self.pageObjs = pageObjs
    self.osId = osId
    self.browserId = browserId
    self.errorId = errorId
    self.closeTime = closeTime
    self.serverIspId = serverIspId
    self.iframeNumber = iframeNumber
    self.additionalDataTime = additionalDataTime
    self.pageOpenTime = pageOpenTime
    self.serverType = serverType
    self.httpVia = httpVia
    self.noCompressElemNumber = noCompressElemNumber
    self.noExpiresElemNumber = noExpiresElemNumber
    self.noEtagElemNumber = noEtagElemNumber
    self.currentCpuUsageRate = currentCpuUsageRate
    self.remarks = remarks
    self.httpCode = httpCode
    self.memorySize = memorySize
    self.har = har
    self.imageUrl = imageUrl
    self.pingInfo = pingInfo
    self.tracertInfo = tracertInfo
    self.nslookupInfo = nslookupInfo
    self.reserved3 = reserved3
    self.serverCountryId = serverCountryId
    self.serverProvinceId = serverProvinceId
    self.serverCityId = serverCityId
    self.errorDesc = errorDesc
    self.responseHeader = responseHeader
    self.errorObjs = errorObjs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pageId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.countryId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.provinceId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.ispId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.localDns = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.clientIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.serverIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.avgCpuUsageRate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.currentRamUsageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.maxRamUsageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.firstScreen = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.startRender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.totalTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.basePageDownloadTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.clientTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.connectTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.connectTotalTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.contentLoadTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.dnsParseTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.dnsTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.firstPackage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.netlayerTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.redirectTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.requestsendTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.sslTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.basePageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.basePageSpeed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.downloadSpeed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.firstScreenBytes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.ajaxNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.connectNumberOfTimes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.dnsParseNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.domNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          self.firstScreenObjs = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.pageObjs = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.osId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I32:
          self.browserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I32:
          self.errorId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.closeTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I32:
          self.serverIspId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I32:
          self.iframeNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I32:
          self.additionalDataTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I32:
          self.pageOpenTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I32:
          self.serverType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.I32:
          self.httpVia = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.noCompressElemNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I32:
          self.noExpiresElemNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.I32:
          self.noEtagElemNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.I32:
          self.currentCpuUsageRate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.STRING:
          self.remarks = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.STRING:
          self.httpCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.I32:
          self.memorySize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.STRING:
          self.har = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.STRING:
          self.imageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.STRING:
          self.pingInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRING:
          self.tracertInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.STRING:
          self.nslookupInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.STRING:
          self.reserved3 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.STRING:
          self.serverCountryId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.I32:
          self.serverProvinceId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.I32:
          self.serverCityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.STRING:
          self.errorDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 67:
        if ftype == TType.STRING:
          self.responseHeader = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 68:
        if ftype == TType.I32:
          self.errorObjs = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PCMonitorSampleUnitThriftModel')
    if self.dataTime is not None:
      oprot.writeFieldBegin('dataTime', TType.STRING, 1)
      oprot.writeString(self.dataTime)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.pageId is not None:
      oprot.writeFieldBegin('pageId', TType.I32, 3)
      oprot.writeI32(self.pageId)
      oprot.writeFieldEnd()
    if self.countryId is not None:
      oprot.writeFieldBegin('countryId', TType.STRING, 4)
      oprot.writeString(self.countryId)
      oprot.writeFieldEnd()
    if self.provinceId is not None:
      oprot.writeFieldBegin('provinceId', TType.I32, 5)
      oprot.writeI32(self.provinceId)
      oprot.writeFieldEnd()
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.I32, 6)
      oprot.writeI32(self.cityId)
      oprot.writeFieldEnd()
    if self.ispId is not None:
      oprot.writeFieldBegin('ispId', TType.I32, 7)
      oprot.writeI32(self.ispId)
      oprot.writeFieldEnd()
    if self.localDns is not None:
      oprot.writeFieldBegin('localDns', TType.STRING, 8)
      oprot.writeString(self.localDns)
      oprot.writeFieldEnd()
    if self.clientIp is not None:
      oprot.writeFieldBegin('clientIp', TType.STRING, 9)
      oprot.writeString(self.clientIp)
      oprot.writeFieldEnd()
    if self.serverIp is not None:
      oprot.writeFieldBegin('serverIp', TType.STRING, 10)
      oprot.writeString(self.serverIp)
      oprot.writeFieldEnd()
    if self.avgCpuUsageRate is not None:
      oprot.writeFieldBegin('avgCpuUsageRate', TType.I32, 11)
      oprot.writeI32(self.avgCpuUsageRate)
      oprot.writeFieldEnd()
    if self.currentRamUsageSize is not None:
      oprot.writeFieldBegin('currentRamUsageSize', TType.I32, 12)
      oprot.writeI32(self.currentRamUsageSize)
      oprot.writeFieldEnd()
    if self.maxRamUsageSize is not None:
      oprot.writeFieldBegin('maxRamUsageSize', TType.I32, 13)
      oprot.writeI32(self.maxRamUsageSize)
      oprot.writeFieldEnd()
    if self.firstScreen is not None:
      oprot.writeFieldBegin('firstScreen', TType.I32, 14)
      oprot.writeI32(self.firstScreen)
      oprot.writeFieldEnd()
    if self.startRender is not None:
      oprot.writeFieldBegin('startRender', TType.I32, 15)
      oprot.writeI32(self.startRender)
      oprot.writeFieldEnd()
    if self.totalTime is not None:
      oprot.writeFieldBegin('totalTime', TType.I32, 16)
      oprot.writeI32(self.totalTime)
      oprot.writeFieldEnd()
    if self.basePageDownloadTime is not None:
      oprot.writeFieldBegin('basePageDownloadTime', TType.I32, 17)
      oprot.writeI32(self.basePageDownloadTime)
      oprot.writeFieldEnd()
    if self.clientTime is not None:
      oprot.writeFieldBegin('clientTime', TType.I32, 18)
      oprot.writeI32(self.clientTime)
      oprot.writeFieldEnd()
    if self.connectTime is not None:
      oprot.writeFieldBegin('connectTime', TType.I32, 19)
      oprot.writeI32(self.connectTime)
      oprot.writeFieldEnd()
    if self.connectTotalTime is not None:
      oprot.writeFieldBegin('connectTotalTime', TType.I32, 20)
      oprot.writeI32(self.connectTotalTime)
      oprot.writeFieldEnd()
    if self.contentLoadTime is not None:
      oprot.writeFieldBegin('contentLoadTime', TType.I32, 21)
      oprot.writeI32(self.contentLoadTime)
      oprot.writeFieldEnd()
    if self.dnsParseTime is not None:
      oprot.writeFieldBegin('dnsParseTime', TType.I32, 22)
      oprot.writeI32(self.dnsParseTime)
      oprot.writeFieldEnd()
    if self.dnsTime is not None:
      oprot.writeFieldBegin('dnsTime', TType.I32, 23)
      oprot.writeI32(self.dnsTime)
      oprot.writeFieldEnd()
    if self.firstPackage is not None:
      oprot.writeFieldBegin('firstPackage', TType.I32, 24)
      oprot.writeI32(self.firstPackage)
      oprot.writeFieldEnd()
    if self.netlayerTime is not None:
      oprot.writeFieldBegin('netlayerTime', TType.I32, 25)
      oprot.writeI32(self.netlayerTime)
      oprot.writeFieldEnd()
    if self.redirectTime is not None:
      oprot.writeFieldBegin('redirectTime', TType.I32, 26)
      oprot.writeI32(self.redirectTime)
      oprot.writeFieldEnd()
    if self.requestsendTime is not None:
      oprot.writeFieldBegin('requestsendTime', TType.I32, 27)
      oprot.writeI32(self.requestsendTime)
      oprot.writeFieldEnd()
    if self.sslTime is not None:
      oprot.writeFieldBegin('sslTime', TType.I32, 28)
      oprot.writeI32(self.sslTime)
      oprot.writeFieldEnd()
    if self.basePageSize is not None:
      oprot.writeFieldBegin('basePageSize', TType.I32, 29)
      oprot.writeI32(self.basePageSize)
      oprot.writeFieldEnd()
    if self.basePageSpeed is not None:
      oprot.writeFieldBegin('basePageSpeed', TType.I32, 30)
      oprot.writeI32(self.basePageSpeed)
      oprot.writeFieldEnd()
    if self.downloadSpeed is not None:
      oprot.writeFieldBegin('downloadSpeed', TType.I32, 31)
      oprot.writeI32(self.downloadSpeed)
      oprot.writeFieldEnd()
    if self.firstScreenBytes is not None:
      oprot.writeFieldBegin('firstScreenBytes', TType.I32, 32)
      oprot.writeI32(self.firstScreenBytes)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 33)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    if self.ajaxNumber is not None:
      oprot.writeFieldBegin('ajaxNumber', TType.I32, 34)
      oprot.writeI32(self.ajaxNumber)
      oprot.writeFieldEnd()
    if self.connectNumberOfTimes is not None:
      oprot.writeFieldBegin('connectNumberOfTimes', TType.I32, 35)
      oprot.writeI32(self.connectNumberOfTimes)
      oprot.writeFieldEnd()
    if self.dnsParseNumber is not None:
      oprot.writeFieldBegin('dnsParseNumber', TType.I32, 36)
      oprot.writeI32(self.dnsParseNumber)
      oprot.writeFieldEnd()
    if self.domNumber is not None:
      oprot.writeFieldBegin('domNumber', TType.I32, 37)
      oprot.writeI32(self.domNumber)
      oprot.writeFieldEnd()
    if self.firstScreenObjs is not None:
      oprot.writeFieldBegin('firstScreenObjs', TType.I32, 38)
      oprot.writeI32(self.firstScreenObjs)
      oprot.writeFieldEnd()
    if self.pageObjs is not None:
      oprot.writeFieldBegin('pageObjs', TType.I32, 39)
      oprot.writeI32(self.pageObjs)
      oprot.writeFieldEnd()
    if self.osId is not None:
      oprot.writeFieldBegin('osId', TType.I32, 40)
      oprot.writeI32(self.osId)
      oprot.writeFieldEnd()
    if self.browserId is not None:
      oprot.writeFieldBegin('browserId', TType.I32, 41)
      oprot.writeI32(self.browserId)
      oprot.writeFieldEnd()
    if self.errorId is not None:
      oprot.writeFieldBegin('errorId', TType.I32, 42)
      oprot.writeI32(self.errorId)
      oprot.writeFieldEnd()
    if self.closeTime is not None:
      oprot.writeFieldBegin('closeTime', TType.I32, 43)
      oprot.writeI32(self.closeTime)
      oprot.writeFieldEnd()
    if self.serverIspId is not None:
      oprot.writeFieldBegin('serverIspId', TType.I32, 44)
      oprot.writeI32(self.serverIspId)
      oprot.writeFieldEnd()
    if self.iframeNumber is not None:
      oprot.writeFieldBegin('iframeNumber', TType.I32, 45)
      oprot.writeI32(self.iframeNumber)
      oprot.writeFieldEnd()
    if self.additionalDataTime is not None:
      oprot.writeFieldBegin('additionalDataTime', TType.I32, 46)
      oprot.writeI32(self.additionalDataTime)
      oprot.writeFieldEnd()
    if self.pageOpenTime is not None:
      oprot.writeFieldBegin('pageOpenTime', TType.I32, 47)
      oprot.writeI32(self.pageOpenTime)
      oprot.writeFieldEnd()
    if self.serverType is not None:
      oprot.writeFieldBegin('serverType', TType.I32, 48)
      oprot.writeI32(self.serverType)
      oprot.writeFieldEnd()
    if self.httpVia is not None:
      oprot.writeFieldBegin('httpVia', TType.I32, 49)
      oprot.writeI32(self.httpVia)
      oprot.writeFieldEnd()
    if self.noCompressElemNumber is not None:
      oprot.writeFieldBegin('noCompressElemNumber', TType.I32, 50)
      oprot.writeI32(self.noCompressElemNumber)
      oprot.writeFieldEnd()
    if self.noExpiresElemNumber is not None:
      oprot.writeFieldBegin('noExpiresElemNumber', TType.I32, 51)
      oprot.writeI32(self.noExpiresElemNumber)
      oprot.writeFieldEnd()
    if self.noEtagElemNumber is not None:
      oprot.writeFieldBegin('noEtagElemNumber', TType.I32, 52)
      oprot.writeI32(self.noEtagElemNumber)
      oprot.writeFieldEnd()
    if self.currentCpuUsageRate is not None:
      oprot.writeFieldBegin('currentCpuUsageRate', TType.I32, 53)
      oprot.writeI32(self.currentCpuUsageRate)
      oprot.writeFieldEnd()
    if self.remarks is not None:
      oprot.writeFieldBegin('remarks', TType.STRING, 54)
      oprot.writeString(self.remarks)
      oprot.writeFieldEnd()
    if self.httpCode is not None:
      oprot.writeFieldBegin('httpCode', TType.STRING, 55)
      oprot.writeString(self.httpCode)
      oprot.writeFieldEnd()
    if self.memorySize is not None:
      oprot.writeFieldBegin('memorySize', TType.I32, 56)
      oprot.writeI32(self.memorySize)
      oprot.writeFieldEnd()
    if self.har is not None:
      oprot.writeFieldBegin('har', TType.STRING, 57)
      oprot.writeString(self.har)
      oprot.writeFieldEnd()
    if self.imageUrl is not None:
      oprot.writeFieldBegin('imageUrl', TType.STRING, 58)
      oprot.writeString(self.imageUrl)
      oprot.writeFieldEnd()
    if self.pingInfo is not None:
      oprot.writeFieldBegin('pingInfo', TType.STRING, 59)
      oprot.writeString(self.pingInfo)
      oprot.writeFieldEnd()
    if self.tracertInfo is not None:
      oprot.writeFieldBegin('tracertInfo', TType.STRING, 60)
      oprot.writeString(self.tracertInfo)
      oprot.writeFieldEnd()
    if self.nslookupInfo is not None:
      oprot.writeFieldBegin('nslookupInfo', TType.STRING, 61)
      oprot.writeString(self.nslookupInfo)
      oprot.writeFieldEnd()
    if self.reserved3 is not None:
      oprot.writeFieldBegin('reserved3', TType.STRING, 62)
      oprot.writeString(self.reserved3)
      oprot.writeFieldEnd()
    if self.serverCountryId is not None:
      oprot.writeFieldBegin('serverCountryId', TType.STRING, 63)
      oprot.writeString(self.serverCountryId)
      oprot.writeFieldEnd()
    if self.serverProvinceId is not None:
      oprot.writeFieldBegin('serverProvinceId', TType.I32, 64)
      oprot.writeI32(self.serverProvinceId)
      oprot.writeFieldEnd()
    if self.serverCityId is not None:
      oprot.writeFieldBegin('serverCityId', TType.I32, 65)
      oprot.writeI32(self.serverCityId)
      oprot.writeFieldEnd()
    if self.errorDesc is not None:
      oprot.writeFieldBegin('errorDesc', TType.STRING, 66)
      oprot.writeString(self.errorDesc)
      oprot.writeFieldEnd()
    if self.responseHeader is not None:
      oprot.writeFieldBegin('responseHeader', TType.STRING, 67)
      oprot.writeString(self.responseHeader)
      oprot.writeFieldEnd()
    if self.errorObjs is not None:
      oprot.writeFieldBegin('errorObjs', TType.I32, 68)
      oprot.writeI32(self.errorObjs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataTime is None:
      raise TProtocol.TProtocolException(message='Required field dataTime is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.pageId is None:
      raise TProtocol.TProtocolException(message='Required field pageId is unset!')
    if self.countryId is None:
      raise TProtocol.TProtocolException(message='Required field countryId is unset!')
    if self.provinceId is None:
      raise TProtocol.TProtocolException(message='Required field provinceId is unset!')
    if self.cityId is None:
      raise TProtocol.TProtocolException(message='Required field cityId is unset!')
    if self.ispId is None:
      raise TProtocol.TProtocolException(message='Required field ispId is unset!')
    if self.localDns is None:
      raise TProtocol.TProtocolException(message='Required field localDns is unset!')
    if self.clientIp is None:
      raise TProtocol.TProtocolException(message='Required field clientIp is unset!')
    if self.serverIp is None:
      raise TProtocol.TProtocolException(message='Required field serverIp is unset!')
    if self.avgCpuUsageRate is None:
      raise TProtocol.TProtocolException(message='Required field avgCpuUsageRate is unset!')
    if self.currentRamUsageSize is None:
      raise TProtocol.TProtocolException(message='Required field currentRamUsageSize is unset!')
    if self.maxRamUsageSize is None:
      raise TProtocol.TProtocolException(message='Required field maxRamUsageSize is unset!')
    if self.firstScreen is None:
      raise TProtocol.TProtocolException(message='Required field firstScreen is unset!')
    if self.startRender is None:
      raise TProtocol.TProtocolException(message='Required field startRender is unset!')
    if self.totalTime is None:
      raise TProtocol.TProtocolException(message='Required field totalTime is unset!')
    if self.basePageDownloadTime is None:
      raise TProtocol.TProtocolException(message='Required field basePageDownloadTime is unset!')
    if self.clientTime is None:
      raise TProtocol.TProtocolException(message='Required field clientTime is unset!')
    if self.connectTime is None:
      raise TProtocol.TProtocolException(message='Required field connectTime is unset!')
    if self.connectTotalTime is None:
      raise TProtocol.TProtocolException(message='Required field connectTotalTime is unset!')
    if self.contentLoadTime is None:
      raise TProtocol.TProtocolException(message='Required field contentLoadTime is unset!')
    if self.dnsParseTime is None:
      raise TProtocol.TProtocolException(message='Required field dnsParseTime is unset!')
    if self.dnsTime is None:
      raise TProtocol.TProtocolException(message='Required field dnsTime is unset!')
    if self.firstPackage is None:
      raise TProtocol.TProtocolException(message='Required field firstPackage is unset!')
    if self.netlayerTime is None:
      raise TProtocol.TProtocolException(message='Required field netlayerTime is unset!')
    if self.redirectTime is None:
      raise TProtocol.TProtocolException(message='Required field redirectTime is unset!')
    if self.requestsendTime is None:
      raise TProtocol.TProtocolException(message='Required field requestsendTime is unset!')
    if self.sslTime is None:
      raise TProtocol.TProtocolException(message='Required field sslTime is unset!')
    if self.basePageSize is None:
      raise TProtocol.TProtocolException(message='Required field basePageSize is unset!')
    if self.basePageSpeed is None:
      raise TProtocol.TProtocolException(message='Required field basePageSpeed is unset!')
    if self.downloadSpeed is None:
      raise TProtocol.TProtocolException(message='Required field downloadSpeed is unset!')
    if self.firstScreenBytes is None:
      raise TProtocol.TProtocolException(message='Required field firstScreenBytes is unset!')
    if self.pageSize is None:
      raise TProtocol.TProtocolException(message='Required field pageSize is unset!')
    if self.ajaxNumber is None:
      raise TProtocol.TProtocolException(message='Required field ajaxNumber is unset!')
    if self.connectNumberOfTimes is None:
      raise TProtocol.TProtocolException(message='Required field connectNumberOfTimes is unset!')
    if self.dnsParseNumber is None:
      raise TProtocol.TProtocolException(message='Required field dnsParseNumber is unset!')
    if self.domNumber is None:
      raise TProtocol.TProtocolException(message='Required field domNumber is unset!')
    if self.firstScreenObjs is None:
      raise TProtocol.TProtocolException(message='Required field firstScreenObjs is unset!')
    if self.pageObjs is None:
      raise TProtocol.TProtocolException(message='Required field pageObjs is unset!')
    if self.osId is None:
      raise TProtocol.TProtocolException(message='Required field osId is unset!')
    if self.browserId is None:
      raise TProtocol.TProtocolException(message='Required field browserId is unset!')
    if self.errorId is None:
      raise TProtocol.TProtocolException(message='Required field errorId is unset!')
    if self.closeTime is None:
      raise TProtocol.TProtocolException(message='Required field closeTime is unset!')
    if self.serverIspId is None:
      raise TProtocol.TProtocolException(message='Required field serverIspId is unset!')
    if self.iframeNumber is None:
      raise TProtocol.TProtocolException(message='Required field iframeNumber is unset!')
    if self.additionalDataTime is None:
      raise TProtocol.TProtocolException(message='Required field additionalDataTime is unset!')
    if self.pageOpenTime is None:
      raise TProtocol.TProtocolException(message='Required field pageOpenTime is unset!')
    if self.serverType is None:
      raise TProtocol.TProtocolException(message='Required field serverType is unset!')
    if self.httpVia is None:
      raise TProtocol.TProtocolException(message='Required field httpVia is unset!')
    if self.noCompressElemNumber is None:
      raise TProtocol.TProtocolException(message='Required field noCompressElemNumber is unset!')
    if self.noExpiresElemNumber is None:
      raise TProtocol.TProtocolException(message='Required field noExpiresElemNumber is unset!')
    if self.noEtagElemNumber is None:
      raise TProtocol.TProtocolException(message='Required field noEtagElemNumber is unset!')
    if self.currentCpuUsageRate is None:
      raise TProtocol.TProtocolException(message='Required field currentCpuUsageRate is unset!')
    if self.remarks is None:
      raise TProtocol.TProtocolException(message='Required field remarks is unset!')
    if self.httpCode is None:
      raise TProtocol.TProtocolException(message='Required field httpCode is unset!')
    if self.memorySize is None:
      raise TProtocol.TProtocolException(message='Required field memorySize is unset!')
    if self.har is None:
      raise TProtocol.TProtocolException(message='Required field har is unset!')
    if self.imageUrl is None:
      raise TProtocol.TProtocolException(message='Required field imageUrl is unset!')
    if self.pingInfo is None:
      raise TProtocol.TProtocolException(message='Required field pingInfo is unset!')
    if self.tracertInfo is None:
      raise TProtocol.TProtocolException(message='Required field tracertInfo is unset!')
    if self.nslookupInfo is None:
      raise TProtocol.TProtocolException(message='Required field nslookupInfo is unset!')
    if self.reserved3 is None:
      raise TProtocol.TProtocolException(message='Required field reserved3 is unset!')
    if self.serverCountryId is None:
      raise TProtocol.TProtocolException(message='Required field serverCountryId is unset!')
    if self.serverProvinceId is None:
      raise TProtocol.TProtocolException(message='Required field serverProvinceId is unset!')
    if self.serverCityId is None:
      raise TProtocol.TProtocolException(message='Required field serverCityId is unset!')
    if self.errorDesc is None:
      raise TProtocol.TProtocolException(message='Required field errorDesc is unset!')
    if self.responseHeader is None:
      raise TProtocol.TProtocolException(message='Required field responseHeader is unset!')
    if self.errorObjs is None:
      raise TProtocol.TProtocolException(message='Required field errorObjs is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PCMonitorSampleQueryRetThriftModel:
  """
  Attributes:
   - dataTime
   - pageId
   - country
   - province
   - city
   - isp
   - localDns
   - clientIp
   - serverIp
   - avgCpuUsageRate
   - currentRamUsageSize
   - maxRamUsageSize
   - firstScreen
   - startRender
   - totalTime
   - basePageDownloadTime
   - clientTime
   - connectTime
   - connectTotalTime
   - contentLoadTime
   - dnsParseTime
   - dnsTime
   - firstPackage
   - netlayerTime
   - redirectTime
   - requestsendTime
   - sslTime
   - basePageSize
   - basePageSpeed
   - downloadSpeed
   - firstScreenBytes
   - pageSize
   - ajaxNumber
   - connectNumberOfTimes
   - dnsParseNumber
   - domNumber
   - firstScreenObjs
   - pageObjs
   - httpCode
   - errorDesc
   - responseHeader
   - errorObjs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataTime', None, None, ), # 1
    (2, TType.I32, 'pageId', None, None, ), # 2
    (3, TType.STRING, 'country', None, None, ), # 3
    (4, TType.STRING, 'province', None, None, ), # 4
    (5, TType.STRING, 'city', None, None, ), # 5
    (6, TType.STRING, 'isp', None, None, ), # 6
    (7, TType.STRING, 'localDns', None, None, ), # 7
    (8, TType.STRING, 'clientIp', None, None, ), # 8
    (9, TType.STRING, 'serverIp', None, None, ), # 9
    (10, TType.I32, 'avgCpuUsageRate', None, None, ), # 10
    (11, TType.I32, 'currentRamUsageSize', None, None, ), # 11
    (12, TType.I32, 'maxRamUsageSize', None, None, ), # 12
    (13, TType.I32, 'firstScreen', None, None, ), # 13
    (14, TType.I32, 'startRender', None, None, ), # 14
    (15, TType.I32, 'totalTime', None, None, ), # 15
    (16, TType.I32, 'basePageDownloadTime', None, None, ), # 16
    (17, TType.I32, 'clientTime', None, None, ), # 17
    (18, TType.I32, 'connectTime', None, None, ), # 18
    (19, TType.I32, 'connectTotalTime', None, None, ), # 19
    (20, TType.I32, 'contentLoadTime', None, None, ), # 20
    (21, TType.I32, 'dnsParseTime', None, None, ), # 21
    (22, TType.I32, 'dnsTime', None, None, ), # 22
    (23, TType.I32, 'firstPackage', None, None, ), # 23
    (24, TType.I32, 'netlayerTime', None, None, ), # 24
    (25, TType.I32, 'redirectTime', None, None, ), # 25
    (26, TType.I32, 'requestsendTime', None, None, ), # 26
    (27, TType.I32, 'sslTime', None, None, ), # 27
    (28, TType.I32, 'basePageSize', None, None, ), # 28
    (29, TType.I32, 'basePageSpeed', None, None, ), # 29
    (30, TType.I32, 'downloadSpeed', None, None, ), # 30
    (31, TType.I32, 'firstScreenBytes', None, None, ), # 31
    (32, TType.I32, 'pageSize', None, None, ), # 32
    (33, TType.I32, 'ajaxNumber', None, None, ), # 33
    (34, TType.I32, 'connectNumberOfTimes', None, None, ), # 34
    (35, TType.I32, 'dnsParseNumber', None, None, ), # 35
    (36, TType.I32, 'domNumber', None, None, ), # 36
    (37, TType.I32, 'firstScreenObjs', None, None, ), # 37
    (38, TType.I32, 'pageObjs', None, None, ), # 38
    (39, TType.STRING, 'httpCode', None, None, ), # 39
    (40, TType.STRING, 'errorDesc', None, None, ), # 40
    (41, TType.STRING, 'responseHeader', None, None, ), # 41
    (42, TType.I32, 'errorObjs', None, None, ), # 42
  )

  def __init__(self, dataTime=None, pageId=None, country=None, province=None, city=None, isp=None, localDns=None, clientIp=None, serverIp=None, avgCpuUsageRate=None, currentRamUsageSize=None, maxRamUsageSize=None, firstScreen=None, startRender=None, totalTime=None, basePageDownloadTime=None, clientTime=None, connectTime=None, connectTotalTime=None, contentLoadTime=None, dnsParseTime=None, dnsTime=None, firstPackage=None, netlayerTime=None, redirectTime=None, requestsendTime=None, sslTime=None, basePageSize=None, basePageSpeed=None, downloadSpeed=None, firstScreenBytes=None, pageSize=None, ajaxNumber=None, connectNumberOfTimes=None, dnsParseNumber=None, domNumber=None, firstScreenObjs=None, pageObjs=None, httpCode=None, errorDesc=None, responseHeader=None, errorObjs=None,):
    self.dataTime = dataTime
    self.pageId = pageId
    self.country = country
    self.province = province
    self.city = city
    self.isp = isp
    self.localDns = localDns
    self.clientIp = clientIp
    self.serverIp = serverIp
    self.avgCpuUsageRate = avgCpuUsageRate
    self.currentRamUsageSize = currentRamUsageSize
    self.maxRamUsageSize = maxRamUsageSize
    self.firstScreen = firstScreen
    self.startRender = startRender
    self.totalTime = totalTime
    self.basePageDownloadTime = basePageDownloadTime
    self.clientTime = clientTime
    self.connectTime = connectTime
    self.connectTotalTime = connectTotalTime
    self.contentLoadTime = contentLoadTime
    self.dnsParseTime = dnsParseTime
    self.dnsTime = dnsTime
    self.firstPackage = firstPackage
    self.netlayerTime = netlayerTime
    self.redirectTime = redirectTime
    self.requestsendTime = requestsendTime
    self.sslTime = sslTime
    self.basePageSize = basePageSize
    self.basePageSpeed = basePageSpeed
    self.downloadSpeed = downloadSpeed
    self.firstScreenBytes = firstScreenBytes
    self.pageSize = pageSize
    self.ajaxNumber = ajaxNumber
    self.connectNumberOfTimes = connectNumberOfTimes
    self.dnsParseNumber = dnsParseNumber
    self.domNumber = domNumber
    self.firstScreenObjs = firstScreenObjs
    self.pageObjs = pageObjs
    self.httpCode = httpCode
    self.errorDesc = errorDesc
    self.responseHeader = responseHeader
    self.errorObjs = errorObjs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.pageId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.country = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.province = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.isp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.localDns = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.clientIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.serverIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.avgCpuUsageRate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.currentRamUsageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.maxRamUsageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.firstScreen = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.startRender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.totalTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.basePageDownloadTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.clientTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.connectTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.connectTotalTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.contentLoadTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.dnsParseTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.dnsTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.firstPackage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.netlayerTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.redirectTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.requestsendTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.sslTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.basePageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.basePageSpeed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.downloadSpeed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.firstScreenBytes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.ajaxNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.connectNumberOfTimes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.dnsParseNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.domNumber = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.firstScreenObjs = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          self.pageObjs = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.httpCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.errorDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.responseHeader = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I32:
          self.errorObjs = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PCMonitorSampleQueryRetThriftModel')
    if self.dataTime is not None:
      oprot.writeFieldBegin('dataTime', TType.STRING, 1)
      oprot.writeString(self.dataTime)
      oprot.writeFieldEnd()
    if self.pageId is not None:
      oprot.writeFieldBegin('pageId', TType.I32, 2)
      oprot.writeI32(self.pageId)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 3)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 4)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 5)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.isp is not None:
      oprot.writeFieldBegin('isp', TType.STRING, 6)
      oprot.writeString(self.isp)
      oprot.writeFieldEnd()
    if self.localDns is not None:
      oprot.writeFieldBegin('localDns', TType.STRING, 7)
      oprot.writeString(self.localDns)
      oprot.writeFieldEnd()
    if self.clientIp is not None:
      oprot.writeFieldBegin('clientIp', TType.STRING, 8)
      oprot.writeString(self.clientIp)
      oprot.writeFieldEnd()
    if self.serverIp is not None:
      oprot.writeFieldBegin('serverIp', TType.STRING, 9)
      oprot.writeString(self.serverIp)
      oprot.writeFieldEnd()
    if self.avgCpuUsageRate is not None:
      oprot.writeFieldBegin('avgCpuUsageRate', TType.I32, 10)
      oprot.writeI32(self.avgCpuUsageRate)
      oprot.writeFieldEnd()
    if self.currentRamUsageSize is not None:
      oprot.writeFieldBegin('currentRamUsageSize', TType.I32, 11)
      oprot.writeI32(self.currentRamUsageSize)
      oprot.writeFieldEnd()
    if self.maxRamUsageSize is not None:
      oprot.writeFieldBegin('maxRamUsageSize', TType.I32, 12)
      oprot.writeI32(self.maxRamUsageSize)
      oprot.writeFieldEnd()
    if self.firstScreen is not None:
      oprot.writeFieldBegin('firstScreen', TType.I32, 13)
      oprot.writeI32(self.firstScreen)
      oprot.writeFieldEnd()
    if self.startRender is not None:
      oprot.writeFieldBegin('startRender', TType.I32, 14)
      oprot.writeI32(self.startRender)
      oprot.writeFieldEnd()
    if self.totalTime is not None:
      oprot.writeFieldBegin('totalTime', TType.I32, 15)
      oprot.writeI32(self.totalTime)
      oprot.writeFieldEnd()
    if self.basePageDownloadTime is not None:
      oprot.writeFieldBegin('basePageDownloadTime', TType.I32, 16)
      oprot.writeI32(self.basePageDownloadTime)
      oprot.writeFieldEnd()
    if self.clientTime is not None:
      oprot.writeFieldBegin('clientTime', TType.I32, 17)
      oprot.writeI32(self.clientTime)
      oprot.writeFieldEnd()
    if self.connectTime is not None:
      oprot.writeFieldBegin('connectTime', TType.I32, 18)
      oprot.writeI32(self.connectTime)
      oprot.writeFieldEnd()
    if self.connectTotalTime is not None:
      oprot.writeFieldBegin('connectTotalTime', TType.I32, 19)
      oprot.writeI32(self.connectTotalTime)
      oprot.writeFieldEnd()
    if self.contentLoadTime is not None:
      oprot.writeFieldBegin('contentLoadTime', TType.I32, 20)
      oprot.writeI32(self.contentLoadTime)
      oprot.writeFieldEnd()
    if self.dnsParseTime is not None:
      oprot.writeFieldBegin('dnsParseTime', TType.I32, 21)
      oprot.writeI32(self.dnsParseTime)
      oprot.writeFieldEnd()
    if self.dnsTime is not None:
      oprot.writeFieldBegin('dnsTime', TType.I32, 22)
      oprot.writeI32(self.dnsTime)
      oprot.writeFieldEnd()
    if self.firstPackage is not None:
      oprot.writeFieldBegin('firstPackage', TType.I32, 23)
      oprot.writeI32(self.firstPackage)
      oprot.writeFieldEnd()
    if self.netlayerTime is not None:
      oprot.writeFieldBegin('netlayerTime', TType.I32, 24)
      oprot.writeI32(self.netlayerTime)
      oprot.writeFieldEnd()
    if self.redirectTime is not None:
      oprot.writeFieldBegin('redirectTime', TType.I32, 25)
      oprot.writeI32(self.redirectTime)
      oprot.writeFieldEnd()
    if self.requestsendTime is not None:
      oprot.writeFieldBegin('requestsendTime', TType.I32, 26)
      oprot.writeI32(self.requestsendTime)
      oprot.writeFieldEnd()
    if self.sslTime is not None:
      oprot.writeFieldBegin('sslTime', TType.I32, 27)
      oprot.writeI32(self.sslTime)
      oprot.writeFieldEnd()
    if self.basePageSize is not None:
      oprot.writeFieldBegin('basePageSize', TType.I32, 28)
      oprot.writeI32(self.basePageSize)
      oprot.writeFieldEnd()
    if self.basePageSpeed is not None:
      oprot.writeFieldBegin('basePageSpeed', TType.I32, 29)
      oprot.writeI32(self.basePageSpeed)
      oprot.writeFieldEnd()
    if self.downloadSpeed is not None:
      oprot.writeFieldBegin('downloadSpeed', TType.I32, 30)
      oprot.writeI32(self.downloadSpeed)
      oprot.writeFieldEnd()
    if self.firstScreenBytes is not None:
      oprot.writeFieldBegin('firstScreenBytes', TType.I32, 31)
      oprot.writeI32(self.firstScreenBytes)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 32)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    if self.ajaxNumber is not None:
      oprot.writeFieldBegin('ajaxNumber', TType.I32, 33)
      oprot.writeI32(self.ajaxNumber)
      oprot.writeFieldEnd()
    if self.connectNumberOfTimes is not None:
      oprot.writeFieldBegin('connectNumberOfTimes', TType.I32, 34)
      oprot.writeI32(self.connectNumberOfTimes)
      oprot.writeFieldEnd()
    if self.dnsParseNumber is not None:
      oprot.writeFieldBegin('dnsParseNumber', TType.I32, 35)
      oprot.writeI32(self.dnsParseNumber)
      oprot.writeFieldEnd()
    if self.domNumber is not None:
      oprot.writeFieldBegin('domNumber', TType.I32, 36)
      oprot.writeI32(self.domNumber)
      oprot.writeFieldEnd()
    if self.firstScreenObjs is not None:
      oprot.writeFieldBegin('firstScreenObjs', TType.I32, 37)
      oprot.writeI32(self.firstScreenObjs)
      oprot.writeFieldEnd()
    if self.pageObjs is not None:
      oprot.writeFieldBegin('pageObjs', TType.I32, 38)
      oprot.writeI32(self.pageObjs)
      oprot.writeFieldEnd()
    if self.httpCode is not None:
      oprot.writeFieldBegin('httpCode', TType.STRING, 39)
      oprot.writeString(self.httpCode)
      oprot.writeFieldEnd()
    if self.errorDesc is not None:
      oprot.writeFieldBegin('errorDesc', TType.STRING, 40)
      oprot.writeString(self.errorDesc)
      oprot.writeFieldEnd()
    if self.responseHeader is not None:
      oprot.writeFieldBegin('responseHeader', TType.STRING, 41)
      oprot.writeString(self.responseHeader)
      oprot.writeFieldEnd()
    if self.errorObjs is not None:
      oprot.writeFieldBegin('errorObjs', TType.I32, 42)
      oprot.writeI32(self.errorObjs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataTime is None:
      raise TProtocol.TProtocolException(message='Required field dataTime is unset!')
    if self.pageId is None:
      raise TProtocol.TProtocolException(message='Required field pageId is unset!')
    if self.country is None:
      raise TProtocol.TProtocolException(message='Required field country is unset!')
    if self.province is None:
      raise TProtocol.TProtocolException(message='Required field province is unset!')
    if self.city is None:
      raise TProtocol.TProtocolException(message='Required field city is unset!')
    if self.isp is None:
      raise TProtocol.TProtocolException(message='Required field isp is unset!')
    if self.localDns is None:
      raise TProtocol.TProtocolException(message='Required field localDns is unset!')
    if self.clientIp is None:
      raise TProtocol.TProtocolException(message='Required field clientIp is unset!')
    if self.serverIp is None:
      raise TProtocol.TProtocolException(message='Required field serverIp is unset!')
    if self.avgCpuUsageRate is None:
      raise TProtocol.TProtocolException(message='Required field avgCpuUsageRate is unset!')
    if self.currentRamUsageSize is None:
      raise TProtocol.TProtocolException(message='Required field currentRamUsageSize is unset!')
    if self.maxRamUsageSize is None:
      raise TProtocol.TProtocolException(message='Required field maxRamUsageSize is unset!')
    if self.firstScreen is None:
      raise TProtocol.TProtocolException(message='Required field firstScreen is unset!')
    if self.startRender is None:
      raise TProtocol.TProtocolException(message='Required field startRender is unset!')
    if self.totalTime is None:
      raise TProtocol.TProtocolException(message='Required field totalTime is unset!')
    if self.basePageDownloadTime is None:
      raise TProtocol.TProtocolException(message='Required field basePageDownloadTime is unset!')
    if self.clientTime is None:
      raise TProtocol.TProtocolException(message='Required field clientTime is unset!')
    if self.connectTime is None:
      raise TProtocol.TProtocolException(message='Required field connectTime is unset!')
    if self.connectTotalTime is None:
      raise TProtocol.TProtocolException(message='Required field connectTotalTime is unset!')
    if self.contentLoadTime is None:
      raise TProtocol.TProtocolException(message='Required field contentLoadTime is unset!')
    if self.dnsParseTime is None:
      raise TProtocol.TProtocolException(message='Required field dnsParseTime is unset!')
    if self.dnsTime is None:
      raise TProtocol.TProtocolException(message='Required field dnsTime is unset!')
    if self.firstPackage is None:
      raise TProtocol.TProtocolException(message='Required field firstPackage is unset!')
    if self.netlayerTime is None:
      raise TProtocol.TProtocolException(message='Required field netlayerTime is unset!')
    if self.redirectTime is None:
      raise TProtocol.TProtocolException(message='Required field redirectTime is unset!')
    if self.requestsendTime is None:
      raise TProtocol.TProtocolException(message='Required field requestsendTime is unset!')
    if self.sslTime is None:
      raise TProtocol.TProtocolException(message='Required field sslTime is unset!')
    if self.basePageSize is None:
      raise TProtocol.TProtocolException(message='Required field basePageSize is unset!')
    if self.basePageSpeed is None:
      raise TProtocol.TProtocolException(message='Required field basePageSpeed is unset!')
    if self.downloadSpeed is None:
      raise TProtocol.TProtocolException(message='Required field downloadSpeed is unset!')
    if self.firstScreenBytes is None:
      raise TProtocol.TProtocolException(message='Required field firstScreenBytes is unset!')
    if self.pageSize is None:
      raise TProtocol.TProtocolException(message='Required field pageSize is unset!')
    if self.ajaxNumber is None:
      raise TProtocol.TProtocolException(message='Required field ajaxNumber is unset!')
    if self.connectNumberOfTimes is None:
      raise TProtocol.TProtocolException(message='Required field connectNumberOfTimes is unset!')
    if self.dnsParseNumber is None:
      raise TProtocol.TProtocolException(message='Required field dnsParseNumber is unset!')
    if self.domNumber is None:
      raise TProtocol.TProtocolException(message='Required field domNumber is unset!')
    if self.firstScreenObjs is None:
      raise TProtocol.TProtocolException(message='Required field firstScreenObjs is unset!')
    if self.pageObjs is None:
      raise TProtocol.TProtocolException(message='Required field pageObjs is unset!')
    if self.httpCode is None:
      raise TProtocol.TProtocolException(message='Required field httpCode is unset!')
    if self.errorDesc is None:
      raise TProtocol.TProtocolException(message='Required field errorDesc is unset!')
    if self.responseHeader is None:
      raise TProtocol.TProtocolException(message='Required field responseHeader is unset!')
    if self.errorObjs is None:
      raise TProtocol.TProtocolException(message='Required field errorObjs is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PCMonitorSampleRltThriftModel:
  """
  Attributes:
   - ret
   - errMsg
   - rlt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ret', None, None, ), # 1
    (2, TType.STRING, 'errMsg', None, None, ), # 2
    (3, TType.LIST, 'rlt', (TType.STRUCT,(PCMonitorSampleQueryRetThriftModel, PCMonitorSampleQueryRetThriftModel.thrift_spec)), None, ), # 3
  )

  def __init__(self, ret=None, errMsg=None, rlt=None,):
    self.ret = ret
    self.errMsg = errMsg
    self.rlt = rlt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.rlt = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = PCMonitorSampleQueryRetThriftModel()
            _elem5.read(iprot)
            self.rlt.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PCMonitorSampleRltThriftModel')
    if self.ret is not None:
      oprot.writeFieldBegin('ret', TType.I32, 1)
      oprot.writeI32(self.ret)
      oprot.writeFieldEnd()
    if self.errMsg is not None:
      oprot.writeFieldBegin('errMsg', TType.STRING, 2)
      oprot.writeString(self.errMsg)
      oprot.writeFieldEnd()
    if self.rlt is not None:
      oprot.writeFieldBegin('rlt', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.rlt))
      for iter6 in self.rlt:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ret is None:
      raise TProtocol.TProtocolException(message='Required field ret is unset!')
    if self.errMsg is None:
      raise TProtocol.TProtocolException(message='Required field errMsg is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PCMonitorElementUnitThriftModel:
  """
  Attributes:
   - dataTime
   - timestamp
   - elementOrder
   - elementUrl
   - cityId
   - ispId
   - clientIp
   - dnsIp
   - serverIp
   - serverCityId
   - serverIspId
   - totalTime
   - totalBytes
   - elementType
   - httpCode
   - httpServer
   - startTime
   - dnsTime
   - connectTime
   - requestTime
   - firstPackage
   - restPackage
   - sslTime
   - provinceId
   - pageId
   - httpVia
   - socketId
   - sendBytes
   - countryId
   - serverCountryId
   - serverProvinceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dataTime', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.I32, 'elementOrder', None, None, ), # 3
    (4, TType.STRING, 'elementUrl', None, None, ), # 4
    (5, TType.I32, 'cityId', None, None, ), # 5
    (6, TType.I32, 'ispId', None, None, ), # 6
    (7, TType.STRING, 'clientIp', None, None, ), # 7
    (8, TType.STRING, 'dnsIp', None, None, ), # 8
    (9, TType.STRING, 'serverIp', None, None, ), # 9
    (10, TType.I32, 'serverCityId', None, None, ), # 10
    (11, TType.I32, 'serverIspId', None, None, ), # 11
    (12, TType.I32, 'totalTime', None, None, ), # 12
    (13, TType.I32, 'totalBytes', None, None, ), # 13
    (14, TType.STRING, 'elementType', None, None, ), # 14
    (15, TType.I32, 'httpCode', None, None, ), # 15
    (16, TType.STRING, 'httpServer', None, None, ), # 16
    (17, TType.I32, 'startTime', None, None, ), # 17
    (18, TType.I32, 'dnsTime', None, None, ), # 18
    (19, TType.I32, 'connectTime', None, None, ), # 19
    (20, TType.I32, 'requestTime', None, None, ), # 20
    (21, TType.I32, 'firstPackage', None, None, ), # 21
    (22, TType.I32, 'restPackage', None, None, ), # 22
    (23, TType.I32, 'sslTime', None, None, ), # 23
    (24, TType.I32, 'provinceId', None, None, ), # 24
    (25, TType.I32, 'pageId', None, None, ), # 25
    (26, TType.STRING, 'httpVia', None, None, ), # 26
    (27, TType.I32, 'socketId', None, None, ), # 27
    (28, TType.I32, 'sendBytes', None, None, ), # 28
    (29, TType.STRING, 'countryId', None, None, ), # 29
    (30, TType.STRING, 'serverCountryId', None, None, ), # 30
    (31, TType.I32, 'serverProvinceId', None, None, ), # 31
  )

  def __init__(self, dataTime=None, timestamp=None, elementOrder=None, elementUrl=None, cityId=None, ispId=None, clientIp=None, dnsIp=None, serverIp=None, serverCityId=None, serverIspId=None, totalTime=None, totalBytes=None, elementType=None, httpCode=None, httpServer=None, startTime=None, dnsTime=None, connectTime=None, requestTime=None, firstPackage=None, restPackage=None, sslTime=None, provinceId=None, pageId=None, httpVia=None, socketId=None, sendBytes=None, countryId=None, serverCountryId=None, serverProvinceId=None,):
    self.dataTime = dataTime
    self.timestamp = timestamp
    self.elementOrder = elementOrder
    self.elementUrl = elementUrl
    self.cityId = cityId
    self.ispId = ispId
    self.clientIp = clientIp
    self.dnsIp = dnsIp
    self.serverIp = serverIp
    self.serverCityId = serverCityId
    self.serverIspId = serverIspId
    self.totalTime = totalTime
    self.totalBytes = totalBytes
    self.elementType = elementType
    self.httpCode = httpCode
    self.httpServer = httpServer
    self.startTime = startTime
    self.dnsTime = dnsTime
    self.connectTime = connectTime
    self.requestTime = requestTime
    self.firstPackage = firstPackage
    self.restPackage = restPackage
    self.sslTime = sslTime
    self.provinceId = provinceId
    self.pageId = pageId
    self.httpVia = httpVia
    self.socketId = socketId
    self.sendBytes = sendBytes
    self.countryId = countryId
    self.serverCountryId = serverCountryId
    self.serverProvinceId = serverProvinceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dataTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.elementOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.elementUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.ispId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.clientIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.dnsIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.serverIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.serverCityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.serverIspId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.totalTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.totalBytes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.elementType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.httpCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.httpServer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.dnsTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.connectTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.requestTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.firstPackage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.restPackage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.sslTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.provinceId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.pageId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.httpVia = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.socketId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.sendBytes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.countryId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.serverCountryId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.serverProvinceId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PCMonitorElementUnitThriftModel')
    if self.dataTime is not None:
      oprot.writeFieldBegin('dataTime', TType.STRING, 1)
      oprot.writeString(self.dataTime)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.elementOrder is not None:
      oprot.writeFieldBegin('elementOrder', TType.I32, 3)
      oprot.writeI32(self.elementOrder)
      oprot.writeFieldEnd()
    if self.elementUrl is not None:
      oprot.writeFieldBegin('elementUrl', TType.STRING, 4)
      oprot.writeString(self.elementUrl)
      oprot.writeFieldEnd()
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.I32, 5)
      oprot.writeI32(self.cityId)
      oprot.writeFieldEnd()
    if self.ispId is not None:
      oprot.writeFieldBegin('ispId', TType.I32, 6)
      oprot.writeI32(self.ispId)
      oprot.writeFieldEnd()
    if self.clientIp is not None:
      oprot.writeFieldBegin('clientIp', TType.STRING, 7)
      oprot.writeString(self.clientIp)
      oprot.writeFieldEnd()
    if self.dnsIp is not None:
      oprot.writeFieldBegin('dnsIp', TType.STRING, 8)
      oprot.writeString(self.dnsIp)
      oprot.writeFieldEnd()
    if self.serverIp is not None:
      oprot.writeFieldBegin('serverIp', TType.STRING, 9)
      oprot.writeString(self.serverIp)
      oprot.writeFieldEnd()
    if self.serverCityId is not None:
      oprot.writeFieldBegin('serverCityId', TType.I32, 10)
      oprot.writeI32(self.serverCityId)
      oprot.writeFieldEnd()
    if self.serverIspId is not None:
      oprot.writeFieldBegin('serverIspId', TType.I32, 11)
      oprot.writeI32(self.serverIspId)
      oprot.writeFieldEnd()
    if self.totalTime is not None:
      oprot.writeFieldBegin('totalTime', TType.I32, 12)
      oprot.writeI32(self.totalTime)
      oprot.writeFieldEnd()
    if self.totalBytes is not None:
      oprot.writeFieldBegin('totalBytes', TType.I32, 13)
      oprot.writeI32(self.totalBytes)
      oprot.writeFieldEnd()
    if self.elementType is not None:
      oprot.writeFieldBegin('elementType', TType.STRING, 14)
      oprot.writeString(self.elementType)
      oprot.writeFieldEnd()
    if self.httpCode is not None:
      oprot.writeFieldBegin('httpCode', TType.I32, 15)
      oprot.writeI32(self.httpCode)
      oprot.writeFieldEnd()
    if self.httpServer is not None:
      oprot.writeFieldBegin('httpServer', TType.STRING, 16)
      oprot.writeString(self.httpServer)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 17)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.dnsTime is not None:
      oprot.writeFieldBegin('dnsTime', TType.I32, 18)
      oprot.writeI32(self.dnsTime)
      oprot.writeFieldEnd()
    if self.connectTime is not None:
      oprot.writeFieldBegin('connectTime', TType.I32, 19)
      oprot.writeI32(self.connectTime)
      oprot.writeFieldEnd()
    if self.requestTime is not None:
      oprot.writeFieldBegin('requestTime', TType.I32, 20)
      oprot.writeI32(self.requestTime)
      oprot.writeFieldEnd()
    if self.firstPackage is not None:
      oprot.writeFieldBegin('firstPackage', TType.I32, 21)
      oprot.writeI32(self.firstPackage)
      oprot.writeFieldEnd()
    if self.restPackage is not None:
      oprot.writeFieldBegin('restPackage', TType.I32, 22)
      oprot.writeI32(self.restPackage)
      oprot.writeFieldEnd()
    if self.sslTime is not None:
      oprot.writeFieldBegin('sslTime', TType.I32, 23)
      oprot.writeI32(self.sslTime)
      oprot.writeFieldEnd()
    if self.provinceId is not None:
      oprot.writeFieldBegin('provinceId', TType.I32, 24)
      oprot.writeI32(self.provinceId)
      oprot.writeFieldEnd()
    if self.pageId is not None:
      oprot.writeFieldBegin('pageId', TType.I32, 25)
      oprot.writeI32(self.pageId)
      oprot.writeFieldEnd()
    if self.httpVia is not None:
      oprot.writeFieldBegin('httpVia', TType.STRING, 26)
      oprot.writeString(self.httpVia)
      oprot.writeFieldEnd()
    if self.socketId is not None:
      oprot.writeFieldBegin('socketId', TType.I32, 27)
      oprot.writeI32(self.socketId)
      oprot.writeFieldEnd()
    if self.sendBytes is not None:
      oprot.writeFieldBegin('sendBytes', TType.I32, 28)
      oprot.writeI32(self.sendBytes)
      oprot.writeFieldEnd()
    if self.countryId is not None:
      oprot.writeFieldBegin('countryId', TType.STRING, 29)
      oprot.writeString(self.countryId)
      oprot.writeFieldEnd()
    if self.serverCountryId is not None:
      oprot.writeFieldBegin('serverCountryId', TType.STRING, 30)
      oprot.writeString(self.serverCountryId)
      oprot.writeFieldEnd()
    if self.serverProvinceId is not None:
      oprot.writeFieldBegin('serverProvinceId', TType.I32, 31)
      oprot.writeI32(self.serverProvinceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataTime is None:
      raise TProtocol.TProtocolException(message='Required field dataTime is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.elementOrder is None:
      raise TProtocol.TProtocolException(message='Required field elementOrder is unset!')
    if self.elementUrl is None:
      raise TProtocol.TProtocolException(message='Required field elementUrl is unset!')
    if self.cityId is None:
      raise TProtocol.TProtocolException(message='Required field cityId is unset!')
    if self.ispId is None:
      raise TProtocol.TProtocolException(message='Required field ispId is unset!')
    if self.clientIp is None:
      raise TProtocol.TProtocolException(message='Required field clientIp is unset!')
    if self.dnsIp is None:
      raise TProtocol.TProtocolException(message='Required field dnsIp is unset!')
    if self.serverIp is None:
      raise TProtocol.TProtocolException(message='Required field serverIp is unset!')
    if self.serverCityId is None:
      raise TProtocol.TProtocolException(message='Required field serverCityId is unset!')
    if self.serverIspId is None:
      raise TProtocol.TProtocolException(message='Required field serverIspId is unset!')
    if self.totalTime is None:
      raise TProtocol.TProtocolException(message='Required field totalTime is unset!')
    if self.totalBytes is None:
      raise TProtocol.TProtocolException(message='Required field totalBytes is unset!')
    if self.elementType is None:
      raise TProtocol.TProtocolException(message='Required field elementType is unset!')
    if self.httpCode is None:
      raise TProtocol.TProtocolException(message='Required field httpCode is unset!')
    if self.httpServer is None:
      raise TProtocol.TProtocolException(message='Required field httpServer is unset!')
    if self.startTime is None:
      raise TProtocol.TProtocolException(message='Required field startTime is unset!')
    if self.dnsTime is None:
      raise TProtocol.TProtocolException(message='Required field dnsTime is unset!')
    if self.connectTime is None:
      raise TProtocol.TProtocolException(message='Required field connectTime is unset!')
    if self.requestTime is None:
      raise TProtocol.TProtocolException(message='Required field requestTime is unset!')
    if self.firstPackage is None:
      raise TProtocol.TProtocolException(message='Required field firstPackage is unset!')
    if self.restPackage is None:
      raise TProtocol.TProtocolException(message='Required field restPackage is unset!')
    if self.sslTime is None:
      raise TProtocol.TProtocolException(message='Required field sslTime is unset!')
    if self.provinceId is None:
      raise TProtocol.TProtocolException(message='Required field provinceId is unset!')
    if self.pageId is None:
      raise TProtocol.TProtocolException(message='Required field pageId is unset!')
    if self.httpVia is None:
      raise TProtocol.TProtocolException(message='Required field httpVia is unset!')
    if self.socketId is None:
      raise TProtocol.TProtocolException(message='Required field socketId is unset!')
    if self.sendBytes is None:
      raise TProtocol.TProtocolException(message='Required field sendBytes is unset!')
    if self.countryId is None:
      raise TProtocol.TProtocolException(message='Required field countryId is unset!')
    if self.serverCountryId is None:
      raise TProtocol.TProtocolException(message='Required field serverCountryId is unset!')
    if self.serverProvinceId is None:
      raise TProtocol.TProtocolException(message='Required field serverProvinceId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
